#include <TimeLib.h>
int LED_PINS[] = { 49, 50, 51, 52, 53, 54, 55, 56 };
int INPUT_PIN = 5;
int CUSTOM_CHAR_LENGTH = 7;
int LED_COUNT = 8;
int letterThickness = 0;
int letterSpacing = 0;

const unsigned char CUSTOM_CHAR[95][7] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },          //   0x20 32
  { 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00 },          // ! 0x21 33
  { 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00 },          // " 0x22 34
  { 0x14, 0x7f, 0x14, 0x7f, 0x14, 0x00, 0x00 },          // # 0x23 35
  { 0x00, 0x07, 0x04, 0x1e, 0x00, 0x00, 0x00 },          // $ 0x24 36
  { 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00 },          // % 0x25 37
  { 0x36, 0x49, 0x56, 0x20, 0x50, 0x00, 0x00 },          // & 0x26 38
  { 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00 },          // ' 0x27 39
  { 0x00, 0x1c, 0x22, 0x41, 0x00, 0x00, 0x00 },          // ( 0x28 40
  { 0x00, 0x41, 0x22, 0x1c, 0x00, 0x00, 0x00 },          // ) 0x29 41
  { 0x14, 0x08, 0x3e, 0x08, 0x14, 0x00, 0x00 },          // * 0x2a 42
  { 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00 },          // + 0x2b 43
  { 0x00, 0x50, 0x30, 0x00, 0x00, 0x00, 0x00 },          // , 0x2c 44
  { 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00 },          // - 0x2d 45
  { 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00 },          // . 0x2e 46
  { 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 },          // / 0x2f 47
  { 0x3e, 0x51, 0x49, 0x45, 0x3e, 0x00, 0x00 },          // 0 0x30 48
  { 0x00, 0x42, 0x7f, 0x40, 0x00, 0x00, 0x00 },          // 1 0x31 49
  { 0x42, 0x61, 0x51, 0x49, 0x46, 0x00, 0x00 },          // 2 0x32 50
  { 0x21, 0x41, 0x45, 0x4b, 0x31, 0x00, 0x00 },          // 3 0x33 51
  { 0x18, 0x14, 0x12, 0x7f, 0x10, 0x00, 0x00 },          // 4 0x34 52
  { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00 },          // 5 0x35 53
  { 0x3c, 0x4a, 0x49, 0x49, 0x30, 0x00, 0x00 },          // 6 0x36 54
  { 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00 },          // 7 0x37 55
  { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00 },          // 8 0x38 56
  { 0x06, 0x49, 0x49, 0x29, 0x1e, 0x00, 0x00 },          // 9 0x39 57
  { 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00 },          // : 0x3a 58
  { 0x00, 0x56, 0x36, 0x00, 0x00, 0x00, 0x00 },          // ; 0x3b 59
  { 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00 },          // < 0x3c 60
  { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00 },          // = 0x3d 61
  { 0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00 },          // > 0x3e 62
  { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00 },          // ? 00111111 63
  { 0x3e, 0x41, 0x5d, 0x49, 0x4e, 0x00, 0x00 },          // @ 0x40 64
  { 01111110, 0x09, 0x09, 0x09, 01111110, 0x00, 0x00 },  // A 0x41 65
  { 0x7f, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00 },          // B 0x42 66
  { 0x3e, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00 },          // C 0x43 67
  { 0x7f, 0x41, 0x41, 0x41, 0x3e, 0x00, 0x00 },          // D 0x44 68
  { 0x7f, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00 },          // E 0x45 69
  { 0x7f, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00 },          // F 0x46 70
  { 0x3e, 0x41, 0x49, 0x49, 0x7a, 0x00, 0x00 },          // G 0x47 71
  { 0x7f, 0x08, 0x08, 0x08, 0x7f, 0x00, 0x00 },          // H 0x48 72
  { 0x00, 0x41, 0x7f, 0x41, 0x00, 0x00, 0x00 },          // I 0x49 73
  { 0x20, 0x40, 0x41, 00111111, 0x01, 0x00, 0x00 },      // J 0x4a 74
  { 0x7f, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00 },          // K 0x4b 75
  { 0x7f, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 },          // L 0x4c 76
  { 0x7f, 0x02, 0x0c, 0x02, 0x7f, 0x00, 0x00 },          // M 0x4d 77
  { 0x7f, 0x04, 0x08, 0x10, 0x7f, 0x00, 0x00 },          // N 0x4e 78
  { 0x3e, 0x41, 0x41, 0x41, 0x3e, 0x00, 0x00 },          // O 0x4f 79
  { 0x7f, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00 },          // P 0x50 80
  { 0x3e, 0x41, 0x51, 0x21, 0x5e, 0x00, 0x00 },          // Q 0x51 81
  { 0x7f, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00 },          // R 0x52 82
  { 0x46, 0x49, 0x49, 0x49, 0x31, 0x00, 0x00 },          // S 0x53 83
  { 0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x00 },          // T 0x54 84
  { 00111111, 0x40, 0x40, 0x40, 00111111, 0x00, 0x00 },  // U 0x55 85
  { 0x0f, 0x30, 0x40, 0x30, 0x0f, 0x00, 0x00 },          // V 0x56 86
  { 00111111, 0x40, 0x30, 0x40, 00111111, 0x00, 0x00 },  // W 0x57 87
  { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00 },          // X 0x58 88
  { 0x07, 0x08, 0x70, 0x08, 0x07, 0x00, 0x00 },          // Y 0x59 89
  { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00 },          // Z 0x5a 90
  { 0x3c, 0x4a, 0x49, 0x29, 0x1e, 0x00, 0x00 },          // [ 0x5b 91
  { 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00 },          // \ 0x5c 92
  { 0x00, 0x41, 0x7f, 0x00, 0x00, 0x00, 0x00 },          // ] 0x5d 93
  { 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00 },          // ^ 0x5e 94
  { 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 },          // _ 0x5f 95
  { 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00 },          // ` 0x60 96
  { 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00 },          // a 0x61 97
  { 0x7f, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00 },          // b 0x62 98
  { 0x38, 0x44, 0x44, 0x44, 0x20, 0x00, 0x00 },          // c 0x63 99
  { 0x38, 0x44, 0x44, 0x48, 0x7f, 0x00, 0x00 },          // d 0x64 100
  { 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00 },          // e 0x65 101
  { 0x08, 01111110, 0x09, 0x01, 0x02, 0x00, 0x00 },      // f 0x66 102
  { 0x0c, 0x52, 0x52, 0x52, 0x3e, 0x00, 0x00 },          // g 0x67 103
  { 0x7f, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00 },          // h 0x68 104
  { 0x00, 0x44, 0x7d, 0x40, 0x00, 0x00, 0x00 },          // i 0x69 105
  { 0x20, 0x40, 0x44, 0x3d, 0x00, 0x00, 0x00 },          // j 0x6a 106
  { 0x00, 0x7f, 0x10, 0x28, 0x44, 0x00, 0x00 },          // k 0x6b 107
  { 0x00, 0x41, 0x7f, 0x40, 0x00, 0x00, 0x00 },          // l 0x6c 108
  { 0x7c, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00 },          // m 0x6d 109
  { 0x7c, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00 },          // n 0x6e 110
  { 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00 },          // o 0x6f 111
  { 0x7c, 0x14, 0x14, 0x14, 0x08, 0x00, 0x00 },          // p 0x70 112
  { 0x08, 0x14, 0x14, 0x18, 0x7c, 0x00, 0x00 },          // q 0x71 113
  { 0x7c, 0x08, 0x04, 0x04, 0x08, 0x00, 0x00 },          // r 0x72 114
  { 0x48, 0x54, 0x54, 0x54, 0x20, 0x00, 0x00 },          // s 0x73 115
  { 0x04, 00111111, 0x44, 0x40, 0x20, 0x00, 0x00 },      // t 0x74 116
  { 0x3c, 0x40, 0x40, 0x20, 0x7c, 0x00, 0x00 },          // u 0x75 117
  { 0x1c, 0x20, 0x40, 0x20, 0x1c, 0x00, 0x00 },          // v 0x76 118
  { 0x3c, 0x40, 0x30, 0x40, 0x3c, 0x00, 0x00 },          // w 0x77 119
  { 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00 },          // x 0x78 120
  { 0x0c, 0x50, 0x50, 0x50, 0x3c, 0x00, 0x00 },          // y 0x79 121
  { 0x44, 0x64, 0x54, 0x4c, 0x44, 0x00, 0x00 },          // z 0x7a 122
  { 0x00, 0x08, 0x36, 0x41, 0x41, 0x00, 0x00 },          // { 0x7b 123
  { 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00 },          // | 0x7c 124
  { 0x41, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00 },          // } 0x7d 125
  { 0xe, 0x1f, 0x3f, 0x7e, 0x3f, 0x1f, 0xe },            // <3 0x7e 126
};



char Display_String[] = "IEM P8~";

char colors[] = { 'C', 'Y', 'G', 'W', 'O', 'R' };
char current_color = 'R';

#include "FastLED.h"

byte bright = 250;  // luminosité des LEDs

int brightness = 20;

#define NUM_LEDS 70  // nombre de LEDs
#define PIN 4        // port de connexion ws2812b
#define CLOCK_PIN 6
CRGB leds[NUM_LEDS];

void SwitchLed(int ledNb, bool value) {
  if (value == true) {
    leds[ledNb] = CRGB::Cyan;
  } else {
    leds[ledNb] = CRGB::Black;
  }
}

void SwitchLedColor(int ledNb, bool value, char color) {
  if (value == true) {
    switch (color) {
      case 'C':
        leds[ledNb] = CRGB::Cyan;
        break;
      case 'R':
        leds[ledNb] = CRGB::Red;
        break;
      case 'G':
        leds[ledNb] = CRGB::Green;
        break;
      case 'W':
        leds[ledNb] = CRGB::White;
        break;
      case 'Y':
        leds[ledNb] = CRGB::Yellow;
        break;
      case 'O':
        leds[ledNb] = CRGB::Orange;
        break;
    }

  } else {
    leds[ledNb] = CRGB::Black;
  }
}

bool init_bool = false;


void setup() {
  Serial.begin(9600);

  // 144 leds strip
  FastLED.addLeds<APA102, PIN, CLOCK_PIN, BGR>(leds, NUM_LEDS);

  FastLED.setBrightness(brightness);
  pinMode(INPUT_PIN, INPUT);

  if (init_bool) {
    //switch on all leds
    for (int i = 0; i < 70; i++) {
      SwitchLedColor(i, true, 'G');
    }

    // Switch off text leds
    SwitchLed(13, false);
    SwitchLed(14, false);
    SwitchLed(15, false);
    SwitchLed(16, false);
    SwitchLed(17, false);
    SwitchLed(18, false);
    SwitchLed(19, false);
    SwitchLed(20, false);

    init_bool = true;
  }
}

bool CompareInts(int A, int B) {
  return A == B;
}

bool GreaterThanInt(int A, int B) {
  return A > B;
}

bool ModuloTen(int A) {
  return A % 10 == 0;
}

int loop_number = 0;
int increment = 0;


void anim() {
  bool is_modulo = false;
  for (int i = 0; i < 70; i++) {
    int count1 = 11;
    int count2 = 22;
    int count3 = 47;
    int count4 = 58;
    if (CompareInts(i, 48) == true || CompareInts(i, 57) == true || CompareInts(i, 12) == true || CompareInts(i, 21) == true) {
      SwitchLedColor(i, true, 'W');
    }

    if (CompareInts(i, 49) == true && i != 50 && i != 51 && i != 52 && i != 53 && i != 54 && i != 55 && i != 56 && i != 20 && i != 13 && i != 14 && i != 15 && i != 16 && i != 17 && i != 18 && i != 19 && i != 21 && i != 12 && i != 48 && i != 57) {
      if (ModuloTen(loop_number) == true) {
        SwitchLedColor(count1 - increment, true, 'Y');
        SwitchLedColor(count2 + increment, true, 'Y');
        SwitchLedColor(count3 - increment, true, 'Y');
        SwitchLedColor(count4 + increment, true, 'Y');
        is_modulo = true;
      }
    }
  }
  if (is_modulo)
    increment += 1;
  if (GreaterThanInt(increment, 12) == true)
    increment = 0;
}


void loop() {



  while (digitalRead(INPUT_PIN) != 0) {
    // Le capteur ne detecte rien
  }

  anim();

  // le capteur a détecté quelque chose
  for (int a = sizeof(Display_String) - 1; a > -1; a--) {
    PRINT_STRING(Display_String[a]);
  }

  loop_number += 1;
  if (loop_number > 120)
    loop_number = 0;
}

char color_char = 'C';

void PRINT_STRING(char data) {

  if (GreaterThanInt(32, data) == true || GreaterThanInt(32, data) == true) {
    data = 32;
  }
  data -= 32;

  int data_int = data;

  // Lettre
  for (int x = CUSTOM_CHAR_LENGTH - 1; x > -1; x--) {
    byte temp_data = CUSTOM_CHAR[data][x];

    if (CompareInts(data_int, 94) == true) {
      color_char = 'R';
    } else {
      color_char = 'C';
    }

    // Barre de lettre
    for (int y = 0; y < LED_COUNT; y++) {
      SwitchLedColor(LED_PINS[y], bitRead(temp_data, y), color_char);
    }
    FastLED.setBrightness(brightness);
    FastLED.show();
    // Epaisseur des lettres
    delayMicroseconds(letterThickness);
  }

  delayMicroseconds(letterSpacing);
}
