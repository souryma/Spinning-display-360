#include <TimeLib.h>
int LED_PINS[] = { 49, 50, 51, 52, 53, 54, 55, 56 };
int INPUT_PIN = 5;
int CUSTOM_CHAR_LENGTH = 7;
int LED_COUNT = 8;
int letterThickness = 0;
int letterSpacing = 0;

const unsigned char CUSTOM_CHAR[95][7] = {
  { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 },  //   00100000 32
  { 00000000, 00000000, 01101111, 00000000, 00000000, 00000000, 00000000 },  // ! 00100001 33
  { 00000000, 00000111, 00000000, 00000111, 00000000, 00000000, 00000000 },  // " 00100010 34
  { 00010100, 01111111, 00010100, 01111111, 00010100, 00000000, 00000000 },  // # 00100011 35
  { 00000000, 00000111, 00000100, 00011110, 00000000, 00000000, 00000000 },  // $ 0x24 36
  { 00100011, 00010011, 00001000, 01100100, 01100010, 00000000, 00000000 },  // % 0x25 37
  { 00110110, 01001001, 01010110, 00100000, 01010000, 00000000, 00000000 },  // & 0x26 38
  { 00000000, 00000000, 00000111, 00000000, 00000000, 00000000, 00000000 },  // ' 00100111 39
  { 00000000, 00011100, 00100010, 01000001, 00000000, 00000000, 00000000 },  // ( 00101000 40
  { 00000000, 01000001, 00100010, 00011100, 00000000, 00000000, 00000000 },  // ) 00101001 41
  { 00010100, 00001000, 00111110, 00001000, 00010100, 00000000, 00000000 },  // * 0x2a 42
  { 00001000, 00001000, 00111110, 00001000, 00001000, 00000000, 00000000 },  // + 0x2b 43
  { 00000000, 01010000, 00110000, 00000000, 00000000, 00000000, 00000000 },  // , 0x2c 44
  { 00001000, 00001000, 00001000, 00001000, 00001000, 00000000, 00000000 },  // - 0x2d 45
  { 00000000, 01100000, 01100000, 00000000, 00000000, 00000000, 00000000 },  // . 0x2e 46
  { 00100000, 00010000, 00001000, 00000100, 00000010, 00000000, 00000000 },  // / 0x2f 47
  { 00111110, 01010001, 01001001, 01000101, 00111110, 00000000, 00000000 },  // 0 00110000 48
  { 00000000, 01000010, 01111111, 01000000, 00000000, 00000000, 00000000 },  // 1 00110001 49
  { 01000010, 01100001, 01010001, 01001001, 01000110, 00000000, 00000000 },  // 2 0x32 50
  { 00100001, 01000001, 01000101, 01001011, 00110001, 00000000, 00000000 },  // 3 0x33 51
  { 00011000, 00010100, 00010010, 01111111, 00010000, 00000000, 00000000 },  // 4 0x34 52
  { 00100111, 01000101, 01000101, 01000101, 00111001, 00000000, 00000000 },  // 5 0x35 53
  { 00111100, 01001010, 01001001, 01001001, 00110000, 00000000, 00000000 },  // 6 00110110 54
  { 00000001, 01110001, 00001001, 00000101, 00000011, 00000000, 00000000 },  // 7 0x37 55
  { 00110110, 01001001, 01001001, 01001001, 00110110, 00000000, 00000000 },  // 8 00111000 56
  { 00000110, 01001001, 01001001, 00101001, 00011110, 00000000, 00000000 },  // 9 00111001 57
  { 00000000, 00110110, 00110110, 00000000, 00000000, 00000000, 00000000 },  // : 0x3a 58
  { 00000000, 01010110, 00110110, 00000000, 00000000, 00000000, 00000000 },  // ; 0x3b 59
  { 00001000, 00010100, 00100010, 01000001, 00000000, 00000000, 00000000 },  // < 00111100 60
  { 00010100, 00010100, 00010100, 00010100, 00010100, 00000000, 00000000 },  // = 00111101 61
  { 00000000, 01000001, 00100010, 00010100, 00001000, 00000000, 00000000 },  // > 00111110 62
  { 00000010, 00000001, 01010001, 00001001, 00000110, 00000000, 00000000 },  // ? 00111111 63
  { 00111110, 01000001, 01011101, 01001001, 01001110, 00000000, 00000000 },  // @ 01000000 64
  { 01111110, 00001001, 00001001, 00001001, 01111110, 00000000, 00000000 },  // A 01000001 65
  { 01111111, 01001001, 01001001, 01001001, 00110110, 00000000, 00000000 },  // B 01000010 66
  { 00111110, 01000001, 01000001, 01000001, 00100010, 00000000, 00000000 },  // C 01000011 67
  { 01111111, 01000001, 01000001, 01000001, 00111110, 00000000, 00000000 },  // D 01000100 68
  { 01111111, 01001001, 01001001, 01001001, 01000001, 00000000, 00000000 },  // E 01000101 69
  { 01111111, 00001001, 00001001, 00001001, 00000001, 00000000, 00000000 },  // F 01000110 70
  { 00111110, 01000001, 01001001, 01001001, 01111010, 00000000, 00000000 },  // G 0x47 71
  { 01111111, 00001000, 00001000, 00001000, 01111111, 00000000, 00000000 },  // H 01001000 72
  { 00000000, 01000001, 01111111, 01000001, 00000000, 00000000, 00000000 },  // I 01001001 73
  { 00100000, 01000000, 01000001, 00111111, 00000001, 00000000, 00000000 },  // J 01001010 74
  { 01111111, 00001000, 00010100, 00100010, 01000001, 00000000, 00000000 },  // K 01001011 75
  { 01111111, 01000000, 01000000, 01000000, 01000000, 00000000, 00000000 },  // L 01001100 76
  { 01111111, 00000010, 00001100, 00000010, 01111111, 00000000, 00000000 },  // M 0x4d 77
  { 01111111, 00000100, 00001000, 00010000, 01111111, 00000000, 00000000 },  // N 01001110 78
  { 00111110, 01000001, 01000001, 01000001, 00111110, 00000000, 00000000 },  // O 0x4f 79
  { 01111111, 00001001, 00001001, 00001001, 00000110, 00000000, 00000000 },  // P 01010000 80
  { 00111110, 01000001, 01010001, 00100001, 01011110, 00000000, 00000000 },  // Q 01010001 81
  { 01111111, 00001001, 00011001, 00101001, 01000110, 00000000, 00000000 },  // R 01010010 82
  { 01000110, 01001001, 01001001, 01001001, 00110001, 00000000, 00000000 },  // S 0x53 83
  { 00000001, 00000001, 01111111, 00000001, 00000001, 00000000, 00000000 },  // T 01010100 84
  { 00111111, 01000000, 01000000, 01000000, 00111111, 00000000, 00000000 },  // U 0x55 85
  { 00001111, 00110000, 01000000, 00110000, 00001111, 00000000, 00000000 },  // V 01010110 86
  { 00111111, 01000000, 00110000, 01000000, 00111111, 00000000, 00000000 },  // W 0x57 87
  { 01100011, 00010100, 00001000, 00010100, 01100011, 00000000, 00000000 },  // X 0x58 88
  { 00000111, 00001000, 01110000, 00001000, 00000111, 00000000, 00000000 },  // Y 0x59 89
  { 01100001, 01010001, 01001001, 01000101, 01000011, 00000000, 00000000 },  // Z 0x5a 90
  { 00111100, 01001010, 01001001, 00101001, 00011110, 00000000, 00000000 },  // [ 0x5b 91
  { 00000010, 00000100, 00001000, 00010000, 00100000, 00000000, 00000000 },  // \ 0x5c 92
  { 00000000, 01000001, 01111111, 00000000, 00000000, 00000000, 00000000 },  // ] 01011101 93
  { 00000100, 00000010, 00000001, 00000010, 00000100, 00000000, 00000000 },  // ^ 01011110 94
  { 01000000, 01000000, 01000000, 01000000, 01000000, 00000000, 00000000 },  // _ 0x5f 95
  { 00000000, 00000000, 00000011, 00000100, 00000000, 00000000, 00000000 },  // ` 01100000 96
  { 00100000, 01010100, 01010100, 01010100, 01111000, 00000000, 00000000 },  // a 01100001 97
  { 01111111, 01001000, 01000100, 01000100, 00111000, 00000000, 00000000 },  // b 01100010 98
  { 00111000, 01000100, 01000100, 01000100, 00100000, 00000000, 00000000 },  // c 01100011 99
  { 00111000, 01000100, 01000100, 01001000, 01111111, 00000000, 00000000 },  // d 01100100 100
  { 00111000, 01010100, 01010100, 01010100, 00011000, 00000000, 00000000 },  // e 0x65 101
  { 00001000, 01111110, 00001001, 00000001, 00000010, 00000000, 00000000 },  // f 0x66 102
  { 00001100, 01010010, 01010010, 01010010, 00111110, 00000000, 00000000 },  // g 0x67 103
  { 01111111, 00001000, 00000100, 00000100, 01111000, 00000000, 00000000 },  // h 0x68 104
  { 00000000, 01000100, 01111101, 01000000, 00000000, 00000000, 00000000 },  // i 0x69 105
  { 00100000, 01000000, 01000100, 00111101, 00000000, 00000000, 00000000 },  // j 0x6a 106
  { 00000000, 01111111, 00010000, 00101000, 01000100, 00000000, 00000000 },  // k 0x6b 107
  { 00000000, 01000001, 01111111, 01000000, 00000000, 00000000, 00000000 },  // l 0x6c 108
  { 01111100, 00000100, 00011000, 00000100, 01111000, 00000000, 00000000 },  // m 0x6d 109
  { 01111100, 00001000, 00000100, 00000100, 01111000, 00000000, 00000000 },  // n 0x6e 110
  { 00111000, 01000100, 01000100, 01000100, 00111000, 00000000, 00000000 },  // o 01101111 111
  { 01111100, 00010100, 00010100, 00010100, 00001000, 00000000, 00000000 },  // p 01110000 112
  { 00001000, 00010100, 00010100, 00011000, 01111100, 00000000, 00000000 },  // q 01110001 113
  { 01111100, 00001000, 00000100, 00000100, 00001000, 00000000, 00000000 },  // r 0x72 114
  { 01001000, 01010100, 01010100, 01010100, 00100000, 00000000, 00000000 },  // s 0x73 115
  { 00000100, 00111111, 01000100, 01000000, 00100000, 00000000, 00000000 },  // t 0x74 116
  { 00111100, 01000000, 01000000, 00100000, 01111100, 00000000, 00000000 },  // u 0x75 117
  { 00011100, 00100000, 01000000, 00100000, 00011100, 00000000, 00000000 },  // v 0x76 118
  { 00111100, 01000000, 00110000, 01000000, 00111100, 00000000, 00000000 },  // w 0x77 119
  { 01000100, 00101000, 00010000, 00101000, 01000100, 00000000, 00000000 },  // x 01111000 120
  { 00001100, 01010000, 01010000, 01010000, 00111100, 00000000, 00000000 },  // y 0x79 121
  { 01000100, 01100100, 01010100, 01001100, 01000100, 00000000, 00000000 },  // z 01111010 122
  { 00000000, 00001000, 00110110, 01000001, 01000001, 00000000, 00000000 },  // { 0x7b 123
  { 00000000, 00000000, 01111111, 00000000, 00000000, 00000000, 00000000 },  // | 01111100 124
  { 01000001, 01000001, 00110110, 00001000, 00000000, 00000000, 00000000 },  // } 01111101 125
  { 00001110, 00011111, 00111111, 01111110, 00111111, 00011111, 00001110 },    // <3 01111110 126
};



char Display_String[] = "IEM P8~";

char colors[] = {'C', 'Y', 'G', 'W', 'O', 'R'};
char current_color = 'R';

#include "FastLED.h"

byte bright = 250;  // luminositÃ© des LEDs

int brightness = 100;

#define NUM_LEDS 70  // nombre de LEDs
#define PIN 4         // port de connexion ws2812b
#define CLOCK_PIN 6
CRGB leds[NUM_LEDS];

void SwitchLed(int ledNb, bool value) {
  if (value) {
    leds[ledNb] = CRGB::Cyan;
  } else {
    leds[ledNb] = CRGB::Black;
  }
}

void SwitchLedColor(int ledNb, bool value, char color) {
  if (value) {
    switch (color) {
    case 'C':leds[ledNb] = CRGB::Cyan;
    break;
    case 'R':leds[ledNb] = CRGB::Red;
    break;
    case 'G':leds[ledNb] = CRGB::Green;
    break;
    case 'W':leds[ledNb] = CRGB::White;
    break;
    case 'Y':leds[ledNb] = CRGB::Yellow;
    break;
    case 'O':leds[ledNb] = CRGB::Orange;
    break;
    }
    
  } else {
    leds[ledNb] = CRGB::Black;
  }
}

void setup() {
  Serial.begin(9600);

  // 144 leds strip
  FastLED.addLeds<APA102, PIN, CLOCK_PIN, BGR>(leds, NUM_LEDS);

  FastLED.setBrightness(brightness);
  pinMode(INPUT_PIN, INPUT);
}

bool CompareInts(int A, int B) {
  return A == B;
}

bool GreaterThanInt(int A, int B) {
  return A > B;
}

int loop_nb = 0;

void loop() {
  if (GreaterThanInt(1, loop_nb)) {
      //switch on all leds
      for (int i = 0; i < 70; i++) {
        SwitchLedColor(i, true, 'G');
        FastLED.setBrightness(brightness);
        FastLED.show();
      }

      // Switch off text leds
      SwitchLed(12, false);
      SwitchLed(13, false);
      SwitchLed(14, false);
      SwitchLed(15, false);
      SwitchLed(16, false);
      SwitchLed(17, false);
      SwitchLed(18, false);
      SwitchLed(19, false);

      loop_nb = 1;
  }
  

  while (digitalRead(INPUT_PIN) != 0) {
    // Le capteur ne detecte rien
  }

  // le capteur a dÃ©tectÃ© quelque chose
  for (int a = sizeof(Display_String) - 1; a > -1; a--) {
      PRINT_STRING(Display_String[a]);
  }
}

char color_char = 'C';

void PRINT_STRING(char data) {

  if (GreaterThanInt(32, data) == true || GreaterThanInt(32, data) == true) {
    data = 32;
  }
  data -= 32;

  int data_int = data;

  // Lettre
  for (int x = CUSTOM_CHAR_LENGTH - 1; x > -1; x--) {
    byte temp_data = CUSTOM_CHAR[data][x];

    if (CompareInts(data_int, 94) == true) {
      color_char = 'R';
    } else {
      color_char = 'C';
    }

    // Barre de lettre
    for (int y = 0; y < LED_COUNT; y++) {
      SwitchLedColor(LED_PINS[y], bitRead(temp_data, y), color_char);
    }
    FastLED.setBrightness(brightness);
    FastLED.show();
    // Epaisseur des lettres
    delayMicroseconds(letterThickness);
  }

  delayMicroseconds(letterSpacing);
}
